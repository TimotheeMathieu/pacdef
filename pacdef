#!/usr/bin/python

import configparser
import os
import subprocess
import sys
from typing import List


def aur_helper_execute(command: List[str]):
    try:
        subprocess.call([AUR_HELPER] + command)
    except FileNotFoundError:
        print(f'Could not start the AUR helper "{AUR_HELPER}".')
        sys.exit(1)


def get_packages_from_pacdef() -> List[str]:
    packages = []
    try:
        files = os.listdir(GROUPS_PATH)
    except FileNotFoundError:
        return []
    for f in files:
        with open(os.path.join(GROUPS_PATH, f)) as fd:
            lines = fd.readlines()
        for line in lines:
            package_name = line.split('#')[0].strip()
            if len(package_name) > 0:
                packages.append(package_name)
    return packages


CONFIG_PATH = os.path.join(os.environ['HOME'], '.config/pacdef')
CONFIG_FILE = os.path.join(CONFIG_PATH, 'pacdef.conf')
GROUPS_PATH = os.path.join(CONFIG_PATH, 'groups')

if not os.path.exists(CONFIG_PATH):
    os.mkdir(CONFIG_PATH)

if not os.path.exists(CONFIG_FILE):
    with open(CONFIG_FILE, 'w'):
        pass

config = configparser.ConfigParser()
config.read(CONFIG_FILE)

try:
    AUR_HELPER = config['misc']['aur_helper']
except KeyError:
    AUR_HELPER = 'paru'

for i, item in enumerate(sys.argv):
    if 'pacdef' in item:
        pacdef_idx = i
        break
else:
    print('Name of the executable is wrong. What did you do?!')
    sys.exit(1)

try:
    action = sys.argv[pacdef_idx + 1]
except IndexError:
    print('no action given. actions can be one of [clean, import, remove, show-groups, show-unmanaged, sync].')
    sys.exit(1)

if action == 'import':
    files = sys.argv[(pacdef_idx + 2):]
    if len(files) == 0:
        print('nothing to import')
    for f in files:
        if os.path.exists(os.path.join(GROUPS_PATH, f)):
            print(f'{f} already exists, skipping')
        else:
            os.symlink(os.path.abspath(f), os.path.join(GROUPS_PATH, f))

if action == 'sync':
    packages = get_packages_from_pacdef()
    installed_packages_all = subprocess.check_output(['pacman', '-Qq']).decode('utf-8')
    installed_packages = installed_packages_all.split('\n')[:-1]  # last entry is zero-length
    to_sync = [p for p in packages if p not in installed_packages]
    if len(to_sync) == 0:
        print('nothing to do')
    else:
        aur_helper_execute(['--sync', '--needed'] + to_sync)

if action == 'clean':
    pacdef_packages = get_packages_from_pacdef()
    installed_packages_explicit = subprocess.check_output(['pacman', '-Qqe']).decode('utf-8')
    installed_packages_explicit = installed_packages_explicit.split('\n')[:-1]  # last entry is zero-length
    packages_to_remove = [p for p in installed_packages_explicit if p not in pacdef_packages]
    print('Would remove the following packages:')
    for p in packages_to_remove:
        print(p)
    while True:
        user_input = input('Continue? [y/N] ')
        print(user_input)
        if len(user_input) > 1:
            pass
        elif user_input.lower() == 'y':
            break
        elif user_input.lower() in ['', 'n']:
            sys.exit(0)
    aur_helper_execute(['--remove'] + packages_to_remove)

if action == 'remove':
    files = sys.argv[(pacdef_idx + 2):]
    if len(files) == 0:
        print('nothing to remove')
    for f in files:
        actual_file = os.path.join(GROUPS_PATH, f)
        if os.path.exists(actual_file):
            subprocess.call(['rm', actual_file])
        else:
            print(f'Did not find the group {f}')

if action == 'show-groups':
    files = os.listdir(GROUPS_PATH)
    files.sort()
    for f in files:
        print(f)

if action == 'show-group':
    groups = sys.argv[(pacdef_idx + 2):]
    if len(groups) == 0:
        print('which group do you want to show?')
        sys.exit(1)
    files = os.listdir(GROUPS_PATH)
    files.sort()
    for f in files:
        if f in groups:
            with open(os.path.join(GROUPS_PATH, f)) as fd:
                print(fd.read())

if action == 'show-unmanaged':
    pacdef_packages = get_packages_from_pacdef()
    installed_packages_explicit = subprocess.check_output(['pacman', '-Qqe']).decode('utf-8')
    installed_packages_explicit = installed_packages_explicit.split('\n')[:-1]  # last entry is zero-length
    unmanaged_packages = [p for p in installed_packages_explicit if p not in pacdef_packages]
    for p in unmanaged_packages:
        print(p)
